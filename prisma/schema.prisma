generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id               Int               @id @unique @default(autoincrement())
  fullName         String            @map("full_name")
  email            String            @unique
  password         String
  role             UserRole          @default(USER)
  provider         String?
  providerId       String?           @map("provider_id")
  verifiedAt       DateTime?         @map("verified_at")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  cart             Cart?
  orders           Order[]
  verificationCode VerificationCode?
}

model Category {
  id        Int       @id @unique @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  products  Product[]
}

model Product {
  id          Int           @id @unique @default(autoincrement())
  name        String
  imageUrl    String        @map("image_url")
  categoryId  Int
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  category    Category      @relation(fields: [categoryId], references: [id])
  items       ProductItem[]
  ingredients Ingredient[]  @relation("IngredientToProduct")
}

model ProductItem {
  id        Int        @id @unique @default(autoincrement())
  price     Int
  size      Int?
  pizzaType Int?       @map("pizza_type")
  productId Int        @map("product_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  cartItem  CartItem[]
  product   Product    @relation(fields: [productId], references: [id])
}

model Ingredient {
  id        Int        @id @unique @default(autoincrement())
  name      String
  imageUrl  String     @map("image_url")
  price     Int
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  cartItems CartItem[] @relation("CartItemToIngredient")
  products  Product[]  @relation("IngredientToProduct")
}

model Cart {
  id Int @id @unique @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique @map("user_id")

  items CartItem[]

  token String

  totalAmount Int @default(0) @map("total_amount")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model CartItem {
  id            Int          @id @unique @default(autoincrement())
  productItemId Int          @map("product_item_id")
  cartId        Int          @map("cart_id")
  quantity      Int
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  cart          Cart         @relation(fields: [cartId], references: [id])
  productItem   ProductItem  @relation(fields: [productItemId], references: [id])
  ingredients   Ingredient[] @relation("CartItemToIngredient")
}

model Order {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @map("user_id")

  token String

  totalAmount Int         @map("total_amount")
  status      OrderStatus
  paymentId   String?     @map("payment_id")

  items Json

  fullName String  @map("full_name")
  email    String
  phone    String
  address  String
  comment  String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model VerificationCode {
  id        Int      @id @unique @default(autoincrement())
  userId    Int      @unique
  code      String
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}
